plugins {
    id 'com.android.library'
}

// Function to load, increment, and save the build number
def getAndIncrementBuildNumber() {
    def buildNumberPropsFile = file('buildnumber.properties')
    def buildNumberProps = new Properties()
    buildNumberProps.load(new FileInputStream(buildNumberPropsFile))
    def buildNumber = buildNumberProps['buildNumber'].toInteger()
    
    // Increment and save the build number immediately
    buildNumber++
    buildNumberProps['buildNumber'] = buildNumber.toString()
    buildNumberProps.store(buildNumberPropsFile.newWriter(), null)
    println "Build number incremented to $buildNumber"
    
    return buildNumber
}

// Get the incremented build number right away
def currentBuildNumber = getAndIncrementBuildNumber()

def unityDir = "$rootDir/unity-test/Library/Bee/Android/Prj/IL2CPP/Gradle/unityLibrary"
def unityClassesJar = file("$unityDir/libs/unity-classes.jar")

android {
    namespace 'com.inventonater.blehid'
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
        consumerProguardFiles "consumer-rules.pro"
        
        // Plugin-specific version info
        buildConfigField "String", "PLUGIN_VERSION", "\"1.0.0\""
        buildConfigField "int", "PLUGIN_BUILD_NUMBER", "$currentBuildNumber"
        buildConfigField "String", "BUILD_TIMESTAMP", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
    }
    
    // Temporarily disable lint to verify our consolidation changes
    lint {
        abortOnError false
    }
    
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

    sourceSets {
        main.java.srcDir "$unityDir/src/main/java"
    }

    // Strip Unity classes so they are NOT packaged into your AAR
    packagingOptions {
        resources.excludes += [
            '**/com/unity3d/player/UnityPlayer*.class'
        ]
    }
    
    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        pickFirst 'classes.jar'
        doNotStrip '**/*.so'
    }
    
    buildFeatures {
        buildConfig = true
    }
}

// Custom task to copy the consolidated AAR to Unity package
tasks.register('copyConsolidatedAarToPackage', Copy) {
    dependsOn 'assembleRelease'
    from "${buildDir}/outputs/aar/unity-plugin-release.aar"
    into "../com.inventonater.blehid/Runtime/Plugins/Android"
    rename { String fileName ->
        fileName.replace("unity-plugin-release.aar", "BleHid.aar")
    }
    doLast {
        logger.lifecycle("Copied consolidated AAR to Unity package directory")
    }
}

// Custom task to stamp the consolidated AAR file with a timestamp for Git tracking
tasks.register('stampAarFile') {
    description = 'Adds a timestamp to the consolidated AAR file to ensure Git recognizes changes'
    
    // Make this task depend on the package copy task
    dependsOn copyConsolidatedAarToPackage
    
    // Define the path to the AAR file
    def consolidatedAarFile = file("../com.inventonater.blehid/Runtime/Plugins/Android/BleHid.aar")
    
    doLast {
        // Function to stamp an AAR file
        def stampAarFile = { aarFile ->
            if (aarFile.exists()) {
                // Create a temporary file with timestamp
                def tempFile = File.createTempFile("timestamp", ".txt")
                tempFile.text = "Build timestamp: ${new Date()} - Consolidated AAR containing both core and unity plugin"
                
                // Add the timestamp to the AAR (which is just a ZIP file)
                ant.zip(destfile: aarFile, update: true) {
                    zipfileset(file: tempFile, fullpath: "timestamp.txt")
                }
                
                // Clean up
                tempFile.delete()
                
                logger.lifecycle("Consolidated AAR file stamped: ${aarFile.name}")
                return true
            } else {
                logger.error("Consolidated AAR file not found: ${aarFile.name}")
                throw new GradleException("Consolidated AAR file not found for stamping")
            }
        }
        
        stampAarFile(consolidatedAarFile)
        logger.lifecycle("Consolidated AAR stamped successfully")
    }
}

// Task to copy the consolidated AAR to Unity package and stamp it
tasks.register('copyToUnity') {
    dependsOn stampAarFile
    description = 'Copies the consolidated AAR to the Unity package and stamps it for Git tracking'
}

// More descriptive alias for new projects
tasks.register('copyToPackage') {
    dependsOn copyToUnity
    description = 'Alias for copyToUnity - copies consolidated AAR to the package structure'
}

dependencies {
    // Core implementation is now directly included in this module
    implementation rootProject.ext.deps.core
    
    // Unity engine stubs
    compileOnly files(unityClassesJar)
}
