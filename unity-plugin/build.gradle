apply plugin: 'com.android.library'

// Function to load, increment, and save the build number
def getAndIncrementBuildNumber() {
    def buildNumberPropsFile = file('buildnumber.properties')
    def buildNumberProps = new Properties()
    buildNumberProps.load(new FileInputStream(buildNumberPropsFile))
    def buildNumber = buildNumberProps['buildNumber'].toInteger()
    
    // Increment and save the build number immediately
    buildNumber++
    buildNumberProps['buildNumber'] = buildNumber.toString()
    buildNumberProps.store(buildNumberPropsFile.newWriter(), null)
    println "Build number incremented to $buildNumber"
    
    return buildNumber
}

// Get the incremented build number right away
def currentBuildNumber = getAndIncrementBuildNumber()

android {
    namespace 'com.example.blehid.plugin'
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
        consumerProguardFiles "consumer-rules.pro"
        
        // Plugin-specific version info
        buildConfigField "String", "PLUGIN_VERSION", "\"1.0.0\""
        buildConfigField "int", "PLUGIN_BUILD_NUMBER", "$currentBuildNumber"
        buildConfigField "String", "BUILD_TIMESTAMP", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
    }
    
    // Temporarily disable lint to verify our consolidation changes
    lintOptions {
        abortOnError false
    }
    
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }
    
    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        pickFirst 'classes.jar'
        doNotStrip '**/*.so'
    }
    
    // Enable buildConfig generation
    buildFeatures {
        buildConfig = true
    }
}

// No longer copying core classes - using dependency approach instead

// Custom task to copy the AAR to Unity project
task copyToUnity(type: Copy, dependsOn: 'assembleRelease') {
    from "${buildDir}/outputs/aar/unity-plugin-release.aar"
    into "../unity-test/Assets/Plugins/Android"
    rename { String fileName ->
        fileName.replace("unity-plugin-release.aar", "BleHidPlugin.aar")
    }
}

dependencies {
    // Use api instead of implementation to ensure core classes are included
    api project(':core')
    
    testImplementation rootProject.ext.deps.junit
    androidTestImplementation rootProject.ext.deps.androidxTestJunit
    
    // Kotlin dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10'
    
    // Unity classes are provided at runtime
    compileOnly fileTree(dir: '../unity-test/Assets/Plugins/Android', include: ['*.jar'], exclude: ['BleHidPlugin.aar'])
}
