# Project Guidelines

## Core Principles

### Code Simplicity and Maintenance
- **CRITICAL: REMOVE OLD CODE AGGRESSIVELY**
- **NEVER DEPRECATE** unused code **ALWAYS DELETE IT**
- **NEVER** create .meta files! These should be ONLY generated by Unity
- **ALWAYS** make sure you are reading ALL relevant .cs files
- Backwards compatibility is **NOT** a priority
- Prefer simple solutions over complex ones
- Avoid duplication and break up files exceeding 500 lines
- Prefer deleting many files in one command (e.g. rm -f a b c d) instead of asking each time
- Delete empty folders and orphaned .meta files
- When fixing issues, stick to existing patterns and techniques in the codebase

### Architecture
- **IMPORTANT: Single namespace only** - All code must use a single namespace with no sub-namespaces
- Use clear, descriptive class names to distinguish components instead of namespaces
- Organize files in folders for project structure, but maintain flat namespace
- Async operations with UniTask and async/await

### Search Tips
- Follow .gitignore rules and skip Library/Temp/Build/obj directories
- Skip .csproj, .sln, .meta, and .asset files unless specifically needed
- Unity logs at: `~/Library/Logs`

## Unity & Code Style

### Unity Configuration
- Unity Version: Unity 6000.0.41f
- Target Platforms: Windows & macOS
- Delete orphaned .meta files, never create files based on them

### Assembly Definitions
- We should only have assembly definitions for root folders within a package (e.g. PackageName.Runtime, PackageName.Editor)
- Use assembly name references (not GUIDs) and set `autoReferenced: false`
- Distinguish components through clear class naming, not namespaces

### Code Style

#### Naming Conventions
- **Types**: PascalCase for classes, structs, enums, delegates (e.g., `NetworkManager`)
- **Members**: 
  - PascalCase for public methods and properties (e.g., `StartHost()`)
  - _camelCase with underscore prefix for private fields (e.g., `_connectionManager`)
  - camelCase for local variables and parameters
- **Interfaces**: IPrefix with PascalCase (e.g., `INetworkDiscoveryService`)
- **Specific Roles**:
  - `ServiceNameConfig` for configuration ScriptableObjects
  - `ServiceNameData` for data structures
  - Avoid generic terms like 'Manager', 'Handler', or 'Processor' unless truly appropriate

#### Code Structure
- **Methods**: Keep under 30 lines; extract longer methods into smaller, focused units
- **Nesting**: Maximum 3 levels deep; use early returns and guard clauses
- **Files**: Break up files exceeding 500 lines
- **Composition**: Prefer composition over inheritance
- **Regions**: Avoid `#region` directives
- **Async**: Use UniTask with proper cancellation support
- **Events**: Initialize with empty delegate: `event Action OnCompleted = delegate { };`
- **Error Handling**: Use exceptions for exceptional cases, return values for expected failures

### Project Organization
- **Folder structure** does not reflect namespace hierarchy (all code uses single namespace)
- Group related files in folders for organization only
- Organize code by feature or domain, not by type
- Keep related files close together in the folder structure
- Place resources (prefabs, scenes, etc.) in appropriate folders near their code

## Workflow

### Git Practices
- Focus commits on single logical changes with concise present-tense messages
- Use branches like `feature/name` or `fix/description`
